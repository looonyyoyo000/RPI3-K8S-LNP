# A deployment is a supervisor for pods and replica sets, giving you fine-grained control over
# how and when a new pod version is rolled out as well as rolled back to a previous state.
kind: Deployment
apiVersion: apps/v1beta2 # for versions before 1.8.0 use apps/v1beta1
metadata:
  name: rpi-lnp-nginx-deploy
spec:
  selector:
    # matchLabels is a map of {key,value} pairs.
    matchLabels:
      app: rpi-lnp-nginx
  replicas: 1 # tells deployment to run 2 pods matching the template
  template: # create pods using pod definition in this template
    metadata:
      # unlike pod-nginx.yaml, the name is not included in the meta data as a unique name is
      # generated from the deployment name
      labels:
        app: rpi-lnp-nginx
    spec:
      containers:
        - name: rpi-lnp-nginx-container
          # This is the name of the image which we are trying to pull from the Docker or
          # internal registry of images.
          image: lsioarmhf/nginx-armhf:latest
          # The default pull policy is IfNotPresent which causes the Kubelet to skip
          # pulling an image if it already exists.  Otherwise set the imagePullPolicy.
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 80
              name: "http-server"
            - containerPort: 443
              name: "https-server"
          volumeMounts:
            # name must match the volume name defined in volumes
            - name: rpi-lnp-mounts
              # mount path within the container
              mountPath: "/www"
              # volumeMounts.subPath property can be used to specify a sub-path inside the
              # referenced volume instead of its root.
              subPath: www
            - name: rpi-lnp-mounts
              mountPath: "/etc/nginx/conf.d"
              subPath: nginx/conf.d
      volumes:
        # define a volume name use for volumeMounts
        - name: rpi-lnp-mounts
          # claims as volumes
          persistentVolumeClaim:
            # name must match the volume name defined in PersistentVolumeClaims
            claimName: rpi-lnp-pvc
---
kind: Deployment
apiVersion: apps/v1beta2
metadata:
  name: rpi-lnp-php71-deploy
spec:
  selector:
    matchLabels:
      app: rpi-lnp-php71
  replicas: 1
  template:
    metadata:
      labels:
        app: rpi-lnp-php71
    spec:
      containers:
        - name: rpi-lnp-php-container
          image: arm32v7/php:7.1-fpm-jessie
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 9000
              name: php71
          volumeMounts:
            - name: rpi-lnp-mounts
              mountPath: "/www"
              subPath: www
            - name: rpi-lnp-mounts
              mountPath: "/usr/local/etc/php"
              subPath: php/7.1/usr/local/etc/php
      volumes:
        - name: rpi-lnp-mounts
          persistentVolumeClaim:
            claimName: rpi-lnp-pvc

# ---
# kind: Deployment
# apiVersion: apps/v1beta2
# metadata:
#   name: shkpgh-mysql57-deploy
# spec:
#   selector:
#     matchLabels:
#       app: shkpgh-mysql57
#   replicas: 1
#   template:
#     metadata:
#       labels:
#         app: shkpgh-mysql57
#     spec:
#       containers:
#         - name: shkpgh-php-container
#           image: mysql:5.7
#           env:
#             # Use secret in real usage
#           - name: MYSQL_ROOT_PASSWORD
#             value: root
#           imagePullPolicy: IfNotPresent
#           ports:
#             - containerPort: 3306
#               name: mysql57
#           volumeMounts:
#             - name: shkpgh-mounts
#               mountPath: "/var/lib/mysql"
#               subPath: mysql/var/lib/mysql
#       volumes:
#         - name: shkpgh-mounts
#           persistentVolumeClaim:
#             claimName: shkpgh-pvc
